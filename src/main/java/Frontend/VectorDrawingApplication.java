/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;

import Shapes.*;
import java.awt.Color;
import java.awt.Point;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.json.simple.*;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.File;

/**
 *
 * @author youssef
 */
@SuppressWarnings("unused")
public class VectorDrawingApplication extends javax.swing.JFrame implements Node {

    private static Canvas canvas = new Canvas();
    private MouseEvent pointPressed = null;
    private LineSegmentWindow lineSegmentWindow = null;
    private ovalWindow circleWindow = null;
    private TriangleWindow triangleWindow = null;
    private RectangleWindow rectangleWindow = null;
    private ShapeAbstract current;
    private ShapeAbstract currentResize;
    public static int lineCounter = 0;
    public static int rectangleCounter = 0;
    public static int ovalCounter = 0;
    public static int triangleCounter = 0;
    private int squareSelected = -1;

    /**
     * Creates new form VectorDrawingApplication
     */
    public VectorDrawingApplication() {
        initComponents();
        this.setTitle("Vector Drawing Application");
        canvas = paintingCanvas;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LineSegment = new javax.swing.JButton();
        Rectangle = new javax.swing.JButton();
        Circle = new javax.swing.JButton();
        Colorize = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Shapes = new javax.swing.JComboBox<>();
        triangleButton = new javax.swing.JButton();
        paintingCanvas = new Frontend.Canvas();
        copy = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveFile = new javax.swing.JMenuItem();
        loadFile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        LineSegment.setBackground(java.awt.SystemColor.activeCaption);
        LineSegment.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        LineSegment.setText("Line Segment");
        LineSegment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineSegmentActionPerformed(evt);
            }
        });

        Rectangle.setBackground(java.awt.SystemColor.activeCaption);
        Rectangle.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        Rectangle.setText("Rectangle");
        Rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectangleActionPerformed(evt);
            }
        });

        Circle.setBackground(java.awt.SystemColor.activeCaption);
        Circle.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        Circle.setText("Oval");
        Circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleActionPerformed(evt);
            }
        });

        Colorize.setBackground(java.awt.SystemColor.activeCaption);
        Colorize.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        Colorize.setText("Colorize");
        Colorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorizeActionPerformed(evt);
            }
        });

        Delete.setBackground(java.awt.SystemColor.activeCaption);
        Delete.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Shapes.setBackground(new java.awt.Color(0, 0, 0));
        Shapes.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        Shapes.setForeground(new java.awt.Color(255, 255, 255));
        Shapes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose shape" }));
        Shapes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShapesActionPerformed(evt);
            }
        });

        triangleButton.setBackground(java.awt.SystemColor.activeCaption);
        triangleButton.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        triangleButton.setText("Triangle");
        triangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleButtonActionPerformed(evt);
            }
        });

        paintingCanvas.setBackground(new java.awt.Color(255, 255, 255));
        paintingCanvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                paintingCanvasMouseDragged(evt);
            }
        });
        paintingCanvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paintingCanvasMouseClicked(evt);
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
                paintingCanvasMousePressed(evt);
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                paintingCanvasMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout paintingCanvasLayout = new javax.swing.GroupLayout(paintingCanvas);
        paintingCanvas.setLayout(paintingCanvasLayout);
        paintingCanvasLayout.setHorizontalGroup(
                paintingCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 491, Short.MAX_VALUE));
        paintingCanvasLayout.setVerticalGroup(
                paintingCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 287, Short.MAX_VALUE));

        copy.setBackground(java.awt.SystemColor.activeCaption);
        copy.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S,
                java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveFile.setText("Save");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        jMenu1.add(saveFile);

        loadFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L,
                java.awt.event.InputEvent.CTRL_DOWN_MASK));
        loadFile.setText("Load");
        loadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileActionPerformed(evt);
            }
        });
        jMenu1.add(loadFile);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Shapes, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(Colorize)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addComponent(copy, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE))))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(paintingCanvas, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(LineSegment, javax.swing.GroupLayout.PREFERRED_SIZE, 101,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(57, 57, 57)
                                                .addComponent(Rectangle, javax.swing.GroupLayout.PREFERRED_SIZE, 91,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(54, 54, 54)
                                                .addComponent(Circle)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(triangleButton)))
                                .addContainerGap(15, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Shapes, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Colorize)
                                        .addComponent(Delete))
                                .addGap(28, 28, 28)
                                .addComponent(copy)
                                .addGap(35, 35, 35))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(LineSegment)
                                        .addComponent(Rectangle)
                                        .addComponent(Circle)
                                        .addComponent(triangleButton))
                                .addGap(18, 18, 18)
                                .addComponent(paintingCanvas, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(57, Short.MAX_VALUE)));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LineSegmentActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_LineSegmentActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        if (lineSegmentWindow == null) {
            lineSegmentWindow = new LineSegmentWindow(canvas, Shapes);
        }
        lineSegmentWindow.setVisible(true);
        lineSegmentWindow.setParentNode(this);

    }// GEN-LAST:event_LineSegmentActionPerformed

    private void RectangleActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_RectangleActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        if (rectangleWindow == null) {
            rectangleWindow = new RectangleWindow(canvas, Shapes);
        }
        rectangleWindow.setVisible(true);
        rectangleWindow.setParentNode(this);
    }// GEN-LAST:event_RectangleActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        if (Shapes.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "You have to select a shape!");
            return;
        }
        int index = Shapes.getSelectedIndex();
        canvas.removeShape(canvas.shapes.get(index - 1));
        canvas.repaint();
        Shapes.removeItemAt(Shapes.getSelectedIndex());
        Shapes.setSelectedIndex(0);
        canvas.squares.clear();
        JOptionPane.showMessageDialog(null, "Shape deleted successfully");

    }// GEN-LAST:event_DeleteActionPerformed

    private void ShapesActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ShapesActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_ShapesActionPerformed

    private void ColorizeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ColorizeActionPerformed
        // TODO add your handling code here:
        // colorize.setVisible(true);
        if (Shapes.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "You have to select a shape!");
            return;
        }
        int index = Shapes.getSelectedIndex();
        if (canvas.shapes.get(index - 1) instanceof LineSegment) {
            Color fillColor = JColorChooser.showDialog(this, "Choose color", null);
            canvas.shapes.get(index - 1).setFillColor(fillColor);
            canvas.repaint();
        } else {

            Color color = JColorChooser.showDialog(this, "Choose the border color", null);
            Color fillColor = JColorChooser.showDialog(this, "Choose fill color", null);
            canvas.shapes.get(index - 1).setColor(color);
            canvas.shapes.get(index - 1).setFillColor(fillColor);
            canvas.repaint();
        }

    }// GEN-LAST:event_ColorizeActionPerformed

    private void CircleActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CircleActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        if (circleWindow == null) {
            circleWindow = new ovalWindow(canvas, Shapes);
        }
        circleWindow.setVisible(true);
        circleWindow.setParentNode(this);
    }// GEN-LAST:event_CircleActionPerformed

    private void triangleButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_triangleButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        if (triangleWindow == null) {
            triangleWindow = new TriangleWindow(canvas, Shapes);
        }
        triangleWindow.setVisible(true);
        triangleWindow.setParentNode(this);

    }// GEN-LAST:event_triangleButtonActionPerformed

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowStateChanged
        // TODO add your handling code here:
    }// GEN-LAST:event_formWindowStateChanged

    private void formMouseMoved(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
    }// GEN-LAST:event_formMouseMoved

    private void paintingCanvasMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_paintingCanvasMouseClicked
        // TODO add your handling code here:

    }// GEN-LAST:event_paintingCanvasMouseClicked

    private void paintingCanvasMousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_paintingCanvasMousePressed
        // TODO add your handling code here:
        if (canvas.contains(new Point(evt.getX(), evt.getY())) && current != null) {
            for (int j = 0; j < canvas.squares.size(); j++) {
                if (canvas.squares.get(j).contains(new Point(evt.getX(), evt.getY()))) {

                    // canvas.squares.get(j).setPoint((new Point(evt.getX(), evt.getY())));
                    pointPressed = null;
                    squareSelected = j;
                    return;
                }

            }

        }

        for (int i = canvas.getShapes().length - 1; i >= 0; i--) {

            if (canvas.getShapes()[i].contains(new Point(evt.getX(), evt.getY()))) {
                canvas.squares.clear();
                current = canvas.getShapes()[i];
                canvas.getShapes()[i].setDraggingPoint(
                        new Point(current.getPosition().x - evt.getX(), current.getPosition().y - evt.getY()));
                Shapes.setSelectedIndex(i + 1);

                if (current instanceof Rectangle) {
                    ResizeSquare resizingRect1 = new ResizeSquare(10, 10);
                    ResizeSquare resizingRect2 = new ResizeSquare(10, 10);
                    ResizeSquare resizingRect3 = new ResizeSquare(10, 10);
                    ResizeSquare resizingRect4 = new ResizeSquare(10, 10);
                    canvas.squares.add(resizingRect1);
                    canvas.squares.add(resizingRect2);
                    canvas.squares.add(resizingRect3);
                    canvas.squares.add(resizingRect4);
                    resizingRect1.setPosition(
                            new Point(((Rectangle) current).getPosition().x - (((Rectangle) current).getWidth() / 2),
                                    ((Rectangle) current).getPosition().y - (((Rectangle) current).getHeight() / 2)));
                    resizingRect1.setDraggingPoint((new Point(resizingRect1.getPosition().x - evt.getX(),
                            resizingRect1.getPosition().y - evt.getY())));
                    resizingRect2.setPosition(
                            new Point(((Rectangle) current).getPosition().x - (((Rectangle) current).getWidth() / 2),
                                    ((Rectangle) current).getPosition().y + (((Rectangle) current).getHeight() / 2)));
                    resizingRect2.setDraggingPoint((new Point(resizingRect2.getPosition().x - evt.getX(),
                            resizingRect2.getPosition().y - evt.getY())));
                    resizingRect3.setPosition(
                            new Point(((Rectangle) current).getPosition().x + (((Rectangle) current).getWidth() / 2),
                                    ((Rectangle) current).getPosition().y - (((Rectangle) current).getHeight() / 2)));
                    resizingRect3.setDraggingPoint((new Point(resizingRect3.getPosition().x - evt.getX(),
                            resizingRect3.getPosition().y - evt.getY())));
                    resizingRect4.setPosition(
                            new Point(((Rectangle) current).getPosition().x + (((Rectangle) current).getWidth() / 2),
                                    ((Rectangle) current).getPosition().y + (((Rectangle) current).getHeight() / 2)));
                    resizingRect4.setDraggingPoint((new Point(resizingRect4.getPosition().x - evt.getX(),
                            resizingRect4.getPosition().y - evt.getY())));
                    if (resizingRect1.contains(new Point(evt.getX(), evt.getY()))
                            || resizingRect2.contains(new Point(evt.getX(), evt.getY()))
                            || resizingRect3.contains(new Point(evt.getX(), evt.getY()))
                            || resizingRect4.contains(new Point(evt.getX(), evt.getY()))) {
                        Shapes.setSelectedIndex(i + 1);
                    }

                    canvas.repaint();
                    pointPressed = null;

                } else if (current instanceof LineSegment) {
                    ResizeSquare resizingRect1 = new ResizeSquare(10, 10);
                    ResizeSquare resizingRect2 = new ResizeSquare(10, 10);
                    canvas.squares.add(resizingRect1);
                    canvas.squares.add(resizingRect2);
                    resizingRect1.setPosition(((LineSegment) current).getPoint1());
                    resizingRect2.setPosition(((LineSegment) current).getPoint2());
                    resizingRect1.setDraggingPoint((new Point(resizingRect1.getPosition().x - evt.getX(),
                            resizingRect1.getPosition().y - evt.getY())));
                    resizingRect2.setDraggingPoint((new Point(resizingRect1.getPosition().x - evt.getX(),
                            resizingRect1.getPosition().y - evt.getY())));
                    if (resizingRect1.contains(new Point(evt.getX(), evt.getY()))
                            || resizingRect2.contains(new Point(evt.getX(), evt.getY()))) {
                        Shapes.setSelectedIndex(i + 1);
                    }

                    canvas.repaint();
                    pointPressed = null;

                } else if (current instanceof Triangle) {
                    ResizeSquare resizingRect1 = new ResizeSquare(10, 10);
                    ResizeSquare resizingRect2 = new ResizeSquare(10, 10);
                    ResizeSquare resizingRect3 = new ResizeSquare(10, 10);
                    canvas.squares.add(resizingRect1);
                    canvas.squares.add(resizingRect2);
                    canvas.squares.add(resizingRect3);
                    resizingRect1.setPosition(((Triangle) current).getPoint1());
                    resizingRect2.setPosition(((Triangle) current).getPoint2());
                    resizingRect3.setPosition(((Triangle) current).getPoint3());
                    resizingRect1.setDraggingPoint((new Point(resizingRect1.getPosition().x - evt.getX(),
                            resizingRect1.getPosition().y - evt.getY())));
                    resizingRect2.setDraggingPoint((new Point(resizingRect1.getPosition().x - evt.getX(),
                            resizingRect1.getPosition().y - evt.getY())));
                    resizingRect3.setDraggingPoint((new Point(resizingRect1.getPosition().x - evt.getX(),
                            resizingRect1.getPosition().y - evt.getY())));
                    if (resizingRect1.contains(new Point(evt.getX(), evt.getY()))
                            || resizingRect2.contains(new Point(evt.getX(), evt.getY()))
                            || resizingRect3.contains(new Point(evt.getX(), evt.getY()))) {
                        Shapes.setSelectedIndex(i + 1);
                    }

                    canvas.repaint();
                    pointPressed = null;

                } else if (current instanceof Oval) {
                    ResizeSquare resizingRect1 = new ResizeSquare(10, 10);
                    ResizeSquare resizingRect2 = new ResizeSquare(10, 10);
                    ResizeSquare resizingRect3 = new ResizeSquare(10, 10);
                    ResizeSquare resizingRect4 = new ResizeSquare(10, 10);
                    canvas.squares.add(resizingRect1);
                    canvas.squares.add(resizingRect2);
                    canvas.squares.add(resizingRect3);
                    canvas.squares.add(resizingRect4);
                    resizingRect1
                            .setPosition(new Point(((Oval) current).getPosition().x - (((Oval) current).getWidth() / 2),
                                    ((Oval) current).getPosition().y - (((Oval) current).getHeight() / 2)));
                    resizingRect1.setDraggingPoint((new Point(resizingRect1.getPosition().x - evt.getX(),
                            resizingRect1.getPosition().y - evt.getY())));
                    resizingRect2
                            .setPosition(new Point(((Oval) current).getPosition().x - (((Oval) current).getWidth() / 2),
                                    ((Oval) current).getPosition().y + (((Oval) current).getHeight() / 2)));
                    resizingRect2.setDraggingPoint((new Point(resizingRect2.getPosition().x - evt.getX(),
                            resizingRect2.getPosition().y - evt.getY())));
                    resizingRect3
                            .setPosition(new Point(((Oval) current).getPosition().x + (((Oval) current).getWidth() / 2),
                                    ((Oval) current).getPosition().y - (((Oval) current).getHeight() / 2)));
                    resizingRect3.setDraggingPoint((new Point(resizingRect3.getPosition().x - evt.getX(),
                            resizingRect3.getPosition().y - evt.getY())));
                    resizingRect4
                            .setPosition(new Point(((Oval) current).getPosition().x + (((Oval) current).getWidth() / 2),
                                    ((Oval) current).getPosition().y + (((Oval) current).getHeight() / 2)));
                    resizingRect4.setDraggingPoint((new Point(resizingRect4.getPosition().x - evt.getX(),
                            resizingRect4.getPosition().y - evt.getY())));
                    if (resizingRect1.contains(new Point(evt.getX(), evt.getY()))
                            || resizingRect2.contains(new Point(evt.getX(), evt.getY()))
                            || resizingRect3.contains(new Point(evt.getX(), evt.getY()))
                            || resizingRect4.contains(new Point(evt.getX(), evt.getY()))) {
                        Shapes.setSelectedIndex(i + 1);
                    }
                    canvas.repaint();
                    pointPressed = null;
                }
                pointPressed = null;

                return;
            }

        }
        canvas.squares.clear();
        Shapes.setSelectedIndex(0);
        canvas.repaint();

    }// GEN-LAST:event_paintingCanvasMousePressed

    private void paintingCanvasMouseDragged(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_paintingCanvasMouseDragged
        // TODO add your handling code here:

        int i = Shapes.getSelectedIndex();
        if (i == 0) {
            return;
        } else {

            if (pointPressed != null && canvas.contains(new Point(pointPressed.getX(), pointPressed.getY()))
                    && (current instanceof Rectangle || current instanceof Oval)) {

                if (canvas.squares.get(squareSelected).contains(new Point(pointPressed.getX(), pointPressed.getY()))) {

                    if (squareSelected == 1) {
                        canvas.squares.get(1).moveTomove(new Point(evt.getX(), evt.getY()));
                        if (current instanceof Rectangle rectangle) {
                            rectangle.setWidth(canvas.squares.get(3).getPosition().x - evt.getX());
                            rectangle.setHeight(evt.getY() - canvas.squares.get(0).getPosition().y);
                            canvas.squares.get(0)
                                    .setPosition(new Point(evt.getX(), canvas.squares.get(0).getPosition().y));
                            canvas.squares.get(3)
                                    .setPosition(new Point(canvas.squares.get(3).getPosition().x, evt.getY()));
                            rectangle.setPosition(new Point(evt.getX() + rectangle.getWidth() / 2,
                                    evt.getY() - rectangle.getHeight() / 2));
                            rectangle.draw(canvas.getGraphics());
                        } else if (current instanceof Oval rectangle) {
                            rectangle.setWidth(canvas.squares.get(3).getPosition().x - evt.getX());
                            rectangle.setHeight(evt.getY() - canvas.squares.get(0).getPosition().y);
                            canvas.squares.get(0)
                                    .setPosition(new Point(evt.getX(), canvas.squares.get(0).getPosition().y));
                            canvas.squares.get(3)
                                    .setPosition(new Point(canvas.squares.get(3).getPosition().x, evt.getY()));
                            rectangle.setPosition(new Point(evt.getX() + rectangle.getWidth() / 2,
                                    Math.abs(evt.getY() - rectangle.getHeight() / 2)));
                            rectangle.draw(canvas.getGraphics());
                        }
                    } else if (squareSelected == 0) {
                        canvas.squares.get(0).moveTomove(new Point(evt.getX(), evt.getY()));
                        if (current instanceof Rectangle rectangle) {
                            rectangle.setWidth(canvas.squares.get(2).getPosition().x - evt.getX());
                            rectangle.setHeight(-evt.getY() + canvas.squares.get(1).getPosition().y);
                            canvas.squares.get(1)
                                    .setPosition(new Point(evt.getX(), canvas.squares.get(1).getPosition().y));
                            canvas.squares.get(2)
                                    .setPosition(new Point(canvas.squares.get(2).getPosition().x, evt.getY()));
                            rectangle.setPosition(new Point(evt.getX() + rectangle.getWidth() / 2,
                                    evt.getY() + rectangle.getHeight() / 2));
                            rectangle.draw(canvas.getGraphics());
                        } else if (current instanceof Oval rectangle) {
                            rectangle.setWidth(canvas.squares.get(2).getPosition().x - evt.getX());
                            rectangle.setHeight(-evt.getY() + canvas.squares.get(1).getPosition().y);
                            canvas.squares.get(1)
                                    .setPosition(new Point(evt.getX(), canvas.squares.get(1).getPosition().y));
                            canvas.squares.get(2)
                                    .setPosition(new Point(canvas.squares.get(2).getPosition().x, evt.getY()));
                            rectangle.setPosition(new Point(evt.getX() + rectangle.getWidth() / 2,
                                    evt.getY() + rectangle.getHeight() / 2));
                            rectangle.draw(canvas.getGraphics());
                        }
                    } else if (squareSelected == 2) {
                        canvas.squares.get(2).moveTomove(new Point(evt.getX(), evt.getY()));
                        if (current instanceof Rectangle rectangle) {
                            rectangle.setWidth(-canvas.squares.get(0).getPosition().x + evt.getX());
                            rectangle.setHeight(-evt.getY() + canvas.squares.get(3).getPosition().y);
                            canvas.squares.get(3)
                                    .setPosition(new Point(evt.getX(), canvas.squares.get(3).getPosition().y));
                            canvas.squares.get(0)
                                    .setPosition(new Point(canvas.squares.get(0).getPosition().x, evt.getY()));
                            rectangle.setPosition(new Point(Math.abs(evt.getX() - rectangle.getWidth() / 2),
                                    evt.getY() + rectangle.getHeight() / 2));
                            rectangle.draw(canvas.getGraphics());
                        } else if (current instanceof Oval rectangle) {
                            rectangle.setWidth(-canvas.squares.get(0).getPosition().x + evt.getX());
                            rectangle.setHeight(-evt.getY() + canvas.squares.get(3).getPosition().y);
                            canvas.squares.get(3)
                                    .setPosition(new Point(evt.getX(), canvas.squares.get(3).getPosition().y));
                            canvas.squares.get(0)
                                    .setPosition(new Point(canvas.squares.get(0).getPosition().x, evt.getY()));
                            rectangle.setPosition(new Point(Math.abs(evt.getX() - rectangle.getWidth() / 2),
                                    evt.getY() + rectangle.getHeight() / 2));
                            rectangle.draw(canvas.getGraphics());
                        }
                    } else if (squareSelected == 3) {
                        canvas.squares.get(3).moveTomove(new Point(evt.getX(), evt.getY()));
                        if (current instanceof Rectangle rectangle) {
                            rectangle.setWidth(-canvas.squares.get(1).getPosition().x + evt.getX());
                            rectangle.setHeight(evt.getY() - canvas.squares.get(2).getPosition().y);
                            canvas.squares.get(2)
                                    .setPosition(new Point(evt.getX(), canvas.squares.get(2).getPosition().y));
                            canvas.squares.get(1)
                                    .setPosition(new Point(canvas.squares.get(1).getPosition().x, evt.getY()));
                            rectangle.setPosition(new Point(Math.abs(evt.getX() - rectangle.getWidth() / 2),
                                    Math.abs(evt.getY() - rectangle.getHeight() / 2)));
                            rectangle.draw(canvas.getGraphics());
                        } else if (current instanceof Oval rectangle) {
                            rectangle.setWidth(-canvas.squares.get(1).getPosition().x + evt.getX());
                            rectangle.setHeight(evt.getY() - canvas.squares.get(2).getPosition().y);
                            canvas.squares.get(2)
                                    .setPosition(new Point(evt.getX(), canvas.squares.get(2).getPosition().y));
                            canvas.squares.get(1)
                                    .setPosition(new Point(canvas.squares.get(1).getPosition().x, evt.getY()));
                            rectangle.setPosition(new Point(Math.abs(evt.getX() - rectangle.getWidth() / 2),
                                    Math.abs(evt.getY() - rectangle.getHeight() / 2)));
                            rectangle.draw(canvas.getGraphics());
                        }

                        canvas.repaint();

                    }

                }

            } else if (pointPressed != null && canvas.contains(new Point(pointPressed.getX(), pointPressed.getY()))
                    && current instanceof LineSegment) {

                if (squareSelected == 0) {
                    canvas.squares.get(0).moveTomove(new Point(evt.getX(), evt.getY()));

                    ((LineSegment) current).setPoint1(canvas.squares.get(0).getPosition());

                } else if (squareSelected == 1) {
                    canvas.squares.get(1).moveTomove(new Point(evt.getX(), evt.getY()));

                    ((LineSegment) current).setPoint2(canvas.squares.get(1).getPosition());
                }
                canvas.repaint();

            } else if (pointPressed != null && canvas.contains(new Point(pointPressed.getX(), pointPressed.getY()))
                    && current instanceof Triangle) {

                if (squareSelected == 0) {
                    canvas.squares.get(0).moveTomove(new Point(evt.getX(), evt.getY()));

                    ((Triangle) current).setPoint1(canvas.squares.get(0).getPosition());

                } else if (squareSelected == 1) {
                    canvas.squares.get(1).moveTomove(new Point(evt.getX(), evt.getY()));

                    ((Triangle) current).setPoint2(canvas.squares.get(1).getPosition());
                } else if (squareSelected == 2) {
                    canvas.squares.get(2).moveTomove(new Point(evt.getX(), evt.getY()));

                    ((Triangle) current).setPoint3(canvas.squares.get(2).getPosition());
                }
                canvas.repaint();

            } else if (pointPressed != null
                    && canvas.shapes.get(i - 1).contains(new Point(pointPressed.getX(), pointPressed.getY()))) {

                canvas.shapes.get(i - 1).moveTo(new Point(evt.getX(), evt.getY()));
                currentResize = canvas.shapes.get(i - 1);
                if (canvas.shapes.get(i - 1) instanceof Rectangle || canvas.shapes.get(i - 1) instanceof Oval) {
                    for (int j = 0; j < canvas.squares.size(); j++) {

                        canvas.squares.get(j).moveTo(new Point(evt.getX(), evt.getY()));
                        canvas.repaint();
                    }
                }

                canvas.repaint();

            }

        }
        pointPressed = evt;

        canvas.repaint();

    }// GEN-LAST:event_paintingCanvasMouseDragged

    private void paintingCanvasMouseReleased(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_paintingCanvasMouseReleased
        // TODO add your handling code here:
        pointPressed = null;
    }// GEN-LAST:event_paintingCanvasMouseReleased

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_copyActionPerformed
        // TODO add your handling code here:
        if (!(Shapes.getSelectedIndex() == 0)) {
            ShapeAbstract current = canvas.shapes.get(Shapes.getSelectedIndex() - 1);
            if (current instanceof Rectangle) {
                ShapeAbstract rectangle = new Rectangle(((Rectangle) current).getWidth(),
                        ((Rectangle) current).getHeight());
                canvas.shapes.add(rectangle);
                rectangle.setPosition(current.getPosition());
                rectangle.setFillColor(current.getFillColor());
                rectangle.setColor(current.getColor());
                Shapes.addItem("rectangle_" + rectangleCounter);
                rectangleCounter++;
            } else if (current instanceof LineSegment) {
                ShapeAbstract line = new LineSegment(new Point(((LineSegment) current).getPoint1()),
                        new Point(((LineSegment) current).getPoint2()));
                canvas.shapes.add(line);
                line.setPosition(current.getPosition());
                line.setFillColor(current.getFillColor());
                Shapes.addItem("line_" + lineCounter);
                lineCounter++;
            } else if (current instanceof Oval) {
                ShapeAbstract oval = new Oval(((Oval) current).getWidth(), ((Oval) current).getHeight());
                canvas.shapes.add(oval);
                oval.setPosition(current.getPosition());
                oval.setFillColor(current.getFillColor());
                oval.setColor(current.getColor());
                Shapes.addItem("oval_" + ovalCounter);
                ovalCounter++;
            } else if (current instanceof Triangle) {
                ShapeAbstract triangle = new Triangle(new Point(((Triangle) current).getPoint1()),
                        new Point(((Triangle) current).getPoint2()), new Point(((Triangle) current).getPoint3()));
                canvas.shapes.add(triangle);
                triangle.setPosition(current.getPosition());
                triangle.setColor(current.getColor());
                triangle.setFillColor(current.getFillColor());
                Shapes.addItem("triangle_" + triangleCounter);
                triangleCounter++;
            }
        }
    }// GEN-LAST:event_copyActionPerformed

    @SuppressWarnings("unchecked")
    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveFileActionPerformed
        // TODO add your handling code here:

        JSONArray shapesToSave = new JSONArray();

        for (int i = 0; i < canvas.shapes.size(); i++) {
            ShapeAbstract currentShape = canvas.shapes.get(i);
            shapesToSave.add(currentShape.toJSONObject());
        }
        JFrame parentFrame = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a Location to save");

        int userSelection = fileChooser.showSaveDialog(parentFrame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try (FileWriter file = new FileWriter(fileToSave)) {
                file.write(shapesToSave.toJSONString());
                file.close();

            } catch (IOException e) {
            }
        }

    }// GEN-LAST:event_saveFileActionPerformed

    @SuppressWarnings("unchecked")
    private void loadFileActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadFileActionPerformed
        // TODO add your handling code here:
        JFrame parentFrame = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        JSONParser parser = new JSONParser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {

            File fileToRead = fileChooser.getSelectedFile();
            try (FileReader myReader = new FileReader(fileToRead)) {
                Object obj = parser.parse(myReader);
                lineCounter = 0;
                triangleCounter = 0;
                ovalCounter = 0;
                rectangleCounter = 0;
                canvas.shapes.clear();
                canvas.squares.clear();
                Shapes.removeAllItems();
                Shapes.addItem("Choose Shape");
                JSONArray shapeList = (JSONArray) obj;
                shapeList.forEach(shp -> parseShapeObject((JSONObject) shp));
                myReader.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }
    }// GEN-LAST:event_loadFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VectorDrawingApplication.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VectorDrawingApplication.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VectorDrawingApplication.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VectorDrawingApplication.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VectorDrawingApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Circle;
    private javax.swing.JButton Colorize;
    private javax.swing.JButton Delete;
    private javax.swing.JButton LineSegment;
    private javax.swing.JButton Rectangle;
    private javax.swing.JComboBox<String> Shapes;
    private javax.swing.JButton copy;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem loadFile;
    private Frontend.Canvas paintingCanvas;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JButton triangleButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from
                                                                       // nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void setParentNode(Node node) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from
                                                                       // nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void parseShapeObject(JSONObject shape) throws NullPointerException {
        int flag = 0;
        try {
            JSONObject shapeObject = (JSONObject) shape.get("Line");
            Point p1 = new Point(Integer.parseInt(shapeObject.get("x1").toString()),
                    Integer.parseInt(shapeObject.get("y1").toString()));
            Point p2 = new Point(Integer.parseInt(shapeObject.get("x2").toString()),
                    Integer.parseInt(shapeObject.get("y2").toString()));
            Color c = new Color(Integer.parseInt(shapeObject.get("redF").toString()),
                    Integer.parseInt(shapeObject.get("greenF").toString()),
                    Integer.parseInt(shapeObject.get("blueF").toString()));
            ShapeAbstract line = new LineSegment(p1, p2);
            canvas.shapes.add(line);
            line.setFillColor(c);
            Shapes.addItem("line_" + lineCounter);
            lineCounter++;
            canvas.repaint();

        } catch (NullPointerException e) {
            try {
                JSONObject shapeObject = (JSONObject) shape.get("Triangle");
                // load for tri
                Point p1 = new Point(Integer.parseInt(shapeObject.get("x1").toString()),
                        Integer.parseInt(shapeObject.get("y1").toString()));
                Point p2 = new Point(Integer.parseInt(shapeObject.get("x2").toString()),
                        Integer.parseInt(shapeObject.get("y2").toString()));
                Point p3 = new Point(Integer.parseInt(shapeObject.get("x3").toString()),
                        Integer.parseInt(shapeObject.get("y3").toString()));
                Color fColor = new Color(Integer.parseInt(shapeObject.get("redF").toString()),
                        Integer.parseInt(shapeObject.get("greenF").toString()),
                        Integer.parseInt(shapeObject.get("blueF").toString()));
                Color bColor = new Color(Integer.parseInt(shapeObject.get("redB").toString()),
                        Integer.parseInt(shapeObject.get("greenB").toString()),
                        Integer.parseInt(shapeObject.get("blueB").toString()));
                ShapeAbstract tri = new Triangle(p1, p2, p3);
                canvas.shapes.add(tri);
                tri.setFillColor(fColor);
                tri.setColor(bColor);
                Shapes.addItem("triangle_" + triangleCounter);
                triangleCounter++;
                canvas.repaint();
            } catch (NullPointerException d) {
                try {
                    JSONObject shapeObject = (JSONObject) shape.get("Rectangle");
                    // load for rect
                    Point center = new Point(Integer.parseInt(shapeObject.get("Position X").toString()),
                            Integer.parseInt(shapeObject.get("Position Y").toString()));
                    int width = Integer.parseInt(shapeObject.get("Width").toString());
                    int height = Integer.parseInt(shapeObject.get("Height").toString());
                    Color fColor = new Color(Integer.parseInt(shapeObject.get("redF").toString()),
                            Integer.parseInt(shapeObject.get("greenF").toString()),
                            Integer.parseInt(shapeObject.get("blueF").toString()));
                    Color bColor = new Color(Integer.parseInt(shapeObject.get("redB").toString()),
                            Integer.parseInt(shapeObject.get("greenB").toString()),
                            Integer.parseInt(shapeObject.get("blueB").toString()));
                    ShapeAbstract rect = new Rectangle(width, height);
                    canvas.shapes.add(rect);
                    rect.setPosition(center);
                    rect.setFillColor(fColor);
                    rect.setColor(bColor);
                    Shapes.addItem("rectangle_" + rectangleCounter);
                    rectangleCounter++;
                    canvas.repaint();
                } catch (NullPointerException z) {
                    try {
                        JSONObject shapeObject = (JSONObject) shape.get("Oval");
                        Point center = new Point(Integer.parseInt(shapeObject.get("Position X").toString()),
                                Integer.parseInt(shapeObject.get("Position Y").toString()));
                        int width = Integer.parseInt(shapeObject.get("Width").toString());
                        int height = Integer.parseInt(shapeObject.get("Height").toString());
                        Color fColor = new Color(Integer.parseInt(shapeObject.get("redF").toString()),
                                Integer.parseInt(shapeObject.get("greenF").toString()),
                                Integer.parseInt(shapeObject.get("blueF").toString()));
                        Color bColor = new Color(Integer.parseInt(shapeObject.get("redB").toString()),
                                Integer.parseInt(shapeObject.get("greenB").toString()),
                                Integer.parseInt(shapeObject.get("blueB").toString()));
                        ShapeAbstract oval = new Oval(width, height);
                        canvas.shapes.add(oval);
                        oval.setPosition(center);
                        oval.setFillColor(fColor);
                        oval.setColor(bColor);
                        Shapes.addItem("oval_" + ovalCounter);
                        ovalCounter++;
                        canvas.repaint();
                        // load for oval
                    } catch (NullPointerException x) {
                        e.printStackTrace();
                    }
                }
            }
        }

    }

}
